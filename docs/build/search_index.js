var documenterSearchIndex = {"docs":
[{"location":"mcdms/#Multiple-Criteria-Decision-Making-Tools","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"","category":"section"},{"location":"mcdms/#TOPSIS","page":"Multiple Criteria Decision Making Tools","title":"TOPSIS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.topsis","category":"page"},{"location":"mcdms/#JMcDM.topsis","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.topsis","text":"    topsis(decisionMat, weights, fns)\n\nApply TOPSIS (Technique for Order of Preference by Similarity to Ideal Solution) method  for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of function that are either minimize or maximize.\n\nDescription\n\ntopsis() applies the TOPSIS method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::TopsisResult: TopsisResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> df = DataFrame();\njulia> df[:, :x] = Float64[9, 8, 7];\njulia> df[:, :y] = Float64[7, 7, 8];\njulia> df[:, :z] = Float64[6, 9, 6];\njulia> df[:, :q] = Float64[7, 6, 6];\n\njulia> w = Float64[4, 2, 6, 8];\n\njulia> df\n3×4 DataFrame\n Row │ x        y        z        q       \n     │ Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────\n   1 │     9.0      7.0      6.0      7.0\n   2 │     8.0      7.0      9.0      6.0\n   3 │     7.0      8.0      6.0      6.0\n\njulia> fns = makeminmax([maximum, maximum, maximum, maximum]);\njulia> result = topsis(df, w, fns);\n\njulia> result.bestIndex\n2\n\njulia> result.scores\n3-element Array{Float64,1}:\n 0.38768695492211824\n 0.6503238218850163\n 0.08347670030339041\n\nReferences\n\nHwang, C.L.; Yoon, K. (1981). Multiple Attribute Decision Making: Methods and Applications. New York: Springer-Verlag\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#ELECTRE","page":"Multiple Criteria Decision Making Tools","title":"ELECTRE","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.electre","category":"page"},{"location":"mcdms/#DEMATEL","page":"Multiple Criteria Decision Making Tools","title":"DEMATEL","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.dematel","category":"page"},{"location":"mcdms/#MOORA","page":"Multiple Criteria Decision Making Tools","title":"MOORA","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.moora","category":"page"},{"location":"mcdms/#VIKOR","page":"Multiple Criteria Decision Making Tools","title":"VIKOR","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.vikor","category":"page"},{"location":"mcdms/#AHP","page":"Multiple Criteria Decision Making Tools","title":"AHP","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.ahp","category":"page"},{"location":"mcdms/#Data-Envelopment-Analysis","page":"Multiple Criteria Decision Making Tools","title":"Data Envelopment Analysis","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.dataenvelop","category":"page"},{"location":"mcdms/#Grey-Relational-Analysis","page":"Multiple Criteria Decision Making Tools","title":"Grey Relational Analysis","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.grey","category":"page"},{"location":"mcdms/#Non-dominated-Sorting","page":"Multiple Criteria Decision Making Tools","title":"Non-dominated Sorting","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.nds","category":"page"},{"location":"mcdms/#SAW","page":"Multiple Criteria Decision Making Tools","title":"SAW","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.saw","category":"page"},{"location":"mcdms/#JMcDM.saw","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.saw","text":"    saw(decisionMat, weights, fns)\n\nApply SAW (Simple Additive Weighting) method for a given matrix and weights. This method also known as WSM (Weighted Sum Model)\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nsaw() applies the SAW method to rank n strategies subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::SawResult: SawResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [4.0  7  3  2  2  2  2;\n                 4.0  4  6  4  4  3  7;\n                 7.0  6  4  2  5  5  3;\n                 3.0  2  5  3  3  2  5;\n                 4.0  2  2  5  5  3  6];\njulia> df = makeDecisionMatrix(decmat)\n5×7 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼───────────────────────────────────────────────────────────────\n   1 │     4.0      7.0      3.0      2.0      2.0      2.0      2.0\n   2 │     4.0      4.0      6.0      4.0      4.0      3.0      7.0\n   3 │     7.0      6.0      4.0      2.0      5.0      5.0      3.0\n   4 │     3.0      2.0      5.0      3.0      3.0      2.0      5.0\n   5 │     4.0      2.0      2.0      5.0      5.0      3.0      6.0\n\njulia> fns = convert(Array{Function,1}, [maximum for i in 1:7])\n7-element Array{Function,1}:\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n\njulia> weights = [0.283, 0.162, 0.162, 0.07, 0.085, 0.162, 0.076];\n\njulia> result = saw(df, weights, fns);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.5532285714285714\n 0.7134857142857142\n 0.8374285714285714\n 0.5146571428571429\n 0.5793428571428572\n\njulia> result.bestIndex\n3\n\nReferences\n\nAfshari, Alireza, Majid Mojahed, and Rosnah Mohd Yusuff. \"Simple additive weighting approach to  personnel selection problem.\" International Journal of Innovation, Management and Technology  1.5 (2010): 511.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#ARAS","page":"Multiple Criteria Decision Making Tools","title":"ARAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.aras","category":"page"},{"location":"mcdms/#JMcDM.aras","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.aras","text":"aras(decisionMat, weights, fs)\n\nApply ARAS (Additive Ratio ASsessment) method for a given matrix, weights and, type of criteria.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfs::Array{Function,1}: m-vector of type of criteria. The benefit criteria shown with \"maximum\", and the cost criteria shown with \"minimum\".\n\nDescription\n\naras() applies the ARAS method to rank n alternatives subject to m criteria and criteria type vector.\n\nOutput\n\n::ARASResult: ARASResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> df = DataFrame(\n    :K1 => [105000.0, 120000, 150000, 115000, 135000],\n    :K2 => [105.0, 110, 120, 105, 115],\n    :K3 => [10.0, 15, 12, 20, 15],\n    :K4 => [4.0, 4, 3, 4, 5],\n    :K5 => [300.0, 500, 550, 600, 400],\n    :K6 => [10.0, 8, 12, 9, 9]\n)\njulia> df\n5×6 DataFrame\n Row │ K1        K2       K3       K4       K5       K6      \n     │ Float64   Float64  Float64  Float64  Float64  Float64 \n─────┼───────────────────────────────────────────────────────\n   1 │ 105000.0    105.0     10.0      4.0    300.0     10.0\n   2 │ 120000.0    110.0     15.0      4.0    500.0      8.0\n   3 │ 150000.0    120.0     12.0      3.0    550.0     12.0\n   4 │ 115000.0    105.0     20.0      4.0    600.0      9.0\n   5 │ 135000.0    115.0     15.0      5.0    400.0      9.0\njulia> result = aras(df, w, fs);\njulia> result.bestIndex\n2\njulia> result.scores\n5-element Array{Float64,1}:\n 0.8142406768388222\n 0.8928861957614441\n 0.764157900073527\n 0.8422546181927358\n 0.8654063509472654\n\nReferences\n\nZavadskas, E. K., & Turskis, Z. (2010). A new additive ratio assessment (ARAS) method in multicriteria decision‐making. Technological and Economic Development of Economy, 16(2), 159-172. Yıldırım, B. F. (2015). \"Çok Kriterli Karar Verme Problemlerinde ARAS Yöntemi\". Kafkas Üniversitesi İktisadi ve İdari Bilimler Fakültesi Dergisi, 6 (9), 285-296. http://dx.doi.org/10.18025/kauiibf.65151\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#WPM","page":"Multiple Criteria Decision Making Tools","title":"WPM","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.wpm","category":"page"},{"location":"mcdms/#JMcDM.wpm","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.wpm","text":"    wpm(decisionMat, weights, fns)\n\nApply WPM (Weighted Product Method) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nwpm() applies the WPM method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::WPMResult: WPMResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [3        12.5        2        120        14        3;\n       5        15        3        110        38        4;\n       3        13        2        120        19        3;\n       4        14        2        100        31        4;\n       3        15        1.5        125        40        4]\n5×6 Array{Float64,2}:\n 3.0  12.5  2.0  120.0  14.0  3.0\n 5.0  15.0  3.0  110.0  38.0  4.0\n 3.0  13.0  2.0  120.0  19.0  3.0\n 4.0  14.0  2.0  100.0  31.0  4.0\n 3.0  15.0  1.5  125.0  40.0  4.0\n\njulia> df = makeDecisionMatrix(decmat)\n5×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │     3.0     12.5      2.0    120.0     14.0      3.0\n   2 │     5.0     15.0      3.0    110.0     38.0      4.0\n   3 │     3.0     13.0      2.0    120.0     19.0      3.0\n   4 │     4.0     14.0      2.0    100.0     31.0      4.0\n   5 │     3.0     15.0      1.5    125.0     40.0      4.0\n\njulia> weights = [0.221, 0.159, 0.175, 0.127, 0.117, 0.201];\n\njulia> fns = [maximum, minimum, minimum, maximum, minimum, maximum];\n\njulia> result = wpm(df, weights, fns);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.7975224331331252\n 0.7532541470584717\n 0.7647463553356331\n 0.7873956894790834\n 0.7674278741781709\n\njulia> result.bestIndex\n1\n\nReferences\n\nZavadskas, E. K., Turskis, Z., Antucheviciene, J., & Zakarevicius, A. (2012). Optimization of Weighted Aggregated Sum Product Assessment. Elektronika Ir Elektrotechnika, 122(6), 3-6. https://doi.org/10.5755/j01.eee.122.6.1810\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#WASPAS","page":"Multiple Criteria Decision Making Tools","title":"WASPAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.waspas","category":"page"},{"location":"mcdms/#JMcDM.waspas","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.waspas","text":"    waspas(decisionMat, weights, fns, lambda)\n\nApply WASPAS (Weighted Aggregated Sum Product ASsessment ) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns.\nlambda::Float64: joint criterion. 0<=lambda<=1, default=0.5.\n\nDescription\n\nwaspas() applies the WASPAS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::WASPASResult: WASPASResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [3        12.5        2        120        14        3;\n       5        15        3        110        38        4;\n       3        13        2        120        19        3;\n       4        14        2        100        31        4;\n       3        15        1.5        125        40        4]\n5×6 Array{Float64,2}:\n 3.0  12.5  2.0  120.0  14.0  3.0\n 5.0  15.0  3.0  110.0  38.0  4.0\n 3.0  13.0  2.0  120.0  19.0  3.0\n 4.0  14.0  2.0  100.0  31.0  4.0\n 3.0  15.0  1.5  125.0  40.0  4.0\n\njulia> df = makeDecisionMatrix(decmat)\n5×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │     3.0     12.5      2.0    120.0     14.0      3.0\n   2 │     5.0     15.0      3.0    110.0     38.0      4.0\n   3 │     3.0     13.0      2.0    120.0     19.0      3.0\n   4 │     4.0     14.0      2.0    100.0     31.0      4.0\n   5 │     3.0     15.0      1.5    125.0     40.0      4.0\n\njulia> weights = [0.221, 0.159, 0.175, 0.127, 0.117, 0.201];\n\njulia> fns = [maximum, minimum, minimum, maximum, minimum, maximum];\n\njulia> lambda = 0.5;\n\njulia> result = wpm(df, weights, fns, lambda);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.8050212165665626\n 0.7750597051081832\n 0.770180748518019\n 0.7964243424353943\n 0.7882389370890854\n\n julia> result.bestIndex\n 1\n\nReferences\n\nZavadskas, E. K., Turskis, Z., Antucheviciene, J., & Zakarevicius, A. (2012). Optimization of Weighted Aggregated Sum Product Assessment. Elektronika Ir Elektrotechnika, 122(6), 3-6. https://doi.org/10.5755/j01.eee.122.6.1810 Aytaç Adalı, E. & Tuş Işık, A.. (2017). Bir Tedarikçi Seçim Problemi İçin SWARA ve WASPAS Yöntemlerine Dayanan Karar Verme Yaklaşımı. International Review of Economics and Management, 5 (4) , 56-77. DOI: 10.18825/iremjournal.335408\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#EDAS","page":"Multiple Criteria Decision Making Tools","title":"EDAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.edas","category":"page"},{"location":"mcdms/#JMcDM.edas","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.edas","text":"    edas(decisionMat, weights, fns)\n\nApply EDAS (Evaluation based on Distance from Average Solution) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nedas() applies the EDAS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::EDASResult: EDASResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [5000 5 5300 450;\n       4500 5 5000 400;\n       4500 4 4700 400;\n       4000 4 4200 400;\n       5000 4 7100 500;\n       5000 5 5400 450;\n       5500 5 6200 500;\n       5000 4 5800 450]\n8×4 Array{Int64,2}:\n 5000  5  5300  450\n 4500  5  5000  400\n 4500  4  4700  400\n 4000  4  4200  400\n 5000  4  7100  500\n 5000  5  5400  450\n 5500  5  6200  500\n 5000  4  5800  450\n\njulia> df = makeDecisionMatrix(decmat)\n8×4 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4    \n     │ Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────\n   1 │  5000.0      5.0   5300.0    450.0\n   2 │  4500.0      5.0   5000.0    400.0\n   3 │  4500.0      4.0   4700.0    400.0\n   4 │  4000.0      4.0   4200.0    400.0\n   5 │  5000.0      4.0   7100.0    500.0\n   6 │  5000.0      5.0   5400.0    450.0\n   7 │  5500.0      5.0   6200.0    500.0\n   8 │  5000.0      4.0   5800.0    450.0\n\njulia> weights = [0.25, 0.25, 0.25, 0.25];\n\njulia> fns = [maximum, maximum, minimum, minimum];\n\njulia> result = edas(df, weights, fns);\n\njulia> result.scores\n8-element Array{Float64,1}:\n 0.7595941163602383\n 0.8860162461306114\n 0.6974721951442592\n 0.739657763190231\n 0.05908329207449442\n 0.7318326305342363\n 0.6416913873322523\n 0.38519414045559647\n\njulia> result.bestIndex\n2\n\nReferences\n\nKeshavarz Ghorabaee, M., Zavadskas, E. K., Olfat, L., & Turskis, Z. (2015). Multi-criteria inventory classification using a new method of evaluation based on distance from average solution (EDAS). Informatica, 26(3), 435-451.\n\nUlutaş, A. (2017). EDAS Yöntemi Kullanılarak Bir Tekstil Atölyesi İçin Dikiş Makinesi Seçimi. İşletme Araştırmaları Dergisi, 9(2), 169-183.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MARCOS","page":"Multiple Criteria Decision Making Tools","title":"MARCOS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.marcos","category":"page"},{"location":"mcdms/#JMcDM.marcos","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.marcos","text":"    marcos(decisionMat, weights, fns)\n\nApply MARCOS (Measurement Alternatives and Ranking according to COmpromise Solution) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmarcos() applies the MARCOS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MARCOSResult: MARCOSResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [8.675 8.433 8.000 7.800 8.025 8.043;\n       8.825 8.600 7.420 7.463 7.825 8.229;\n       8.325 7.600 8.040 7.700 7.925 7.600;\n       8.525 8.667 7.180 7.375 7.750 8.071]\n4×6 Array{Float64,2}:\n 8.675  8.433  8.0   7.8    8.025  8.043\n 8.825  8.6    7.42  7.463  7.825  8.229\n 8.325  7.6    8.04  7.7    7.925  7.6\n 8.525  8.667  7.18  7.375  7.75   8.071\n\njulia> df = makeDecisionMatrix(decmat)\n\n4×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │   8.675    8.433     8.0     7.8      8.025    8.043\n   2 │   8.825    8.6       7.42    7.463    7.825    8.229\n   3 │   8.325    7.6       8.04    7.7      7.925    7.6\n   4 │   8.525    8.667     7.18    7.375    7.75     8.071\n\njulia> weights = [0.1901901901901902 , 0.15915915915915918 , 0.19819819819819823, 0.1901901901901902, 0.15115115115115116, 0.11111111111111112];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum];\n\njulia> Fns = convert(Array{Function, 1} , fns)\n\njulia> result = marcos(df, weights, Fns);\n\njulia> result.scores\n4-element Array{Float64,1}:\n 0.6848657890705123\n 0.6727670074308345\n 0.6625969531206817\n 0.6611030275027843\n\njulia> result.bestIndex\n1\n\nReferences\n\nStević, Z., Pamučar, D., Puška, A., Chatterjee, P., Sustainable supplier selection in healthcare industries using a new MCDM method: Measurement Alternatives and Ranking according to COmpromise Solution (MARCOS), Computers & Industrial Engineering (2019), doi: https://doi.org/10.1016/j.cie.2019.106231\n\nPuška, A., Stojanović, I., Maksimović, A., & Osmanović, N. (2020). Evaluation software of project management used measurement of alternatives and ranking according to compromise solution (MARCOS) method. Operational Research in Engineering Sciences: Theory and Applications, 3(1), 89-102.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MABAC","page":"Multiple Criteria Decision Making Tools","title":"MABAC","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.mabac","category":"page"},{"location":"mcdms/#JMcDM.mabac","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.mabac","text":"    mabac(decisionMat, weights, fns)\n\nApply MABAC (Multi-Attributive Border Approximation area Comparison) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmabac() applies the MABAC method to rank n alternatives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MABACResult: MABACResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [2 1 4 7 6 6 7 3000;\n       4 1 5 6 7 7 6 3500;\n       3 2 6 6 5 6 8 4000;\n       5 1 5 7 6 7 7 3000;\n       4 2 5 6 7 7 6 3000;\n       3 2 6 6 6 6 6 3500]\n6×8 \nArray{Int64,2}:\n 2  1  4  7  6  6  7  3000\n 4  1  5  6  7  7  6  3500\n 3  2  6  6  5  6  8  4000\n 5  1  5  7  6  7  7  3000\n 4  2  5  6  7  7  6  3000\n 3  2  6  6  6  6  6  3500\n\njulia> df = makeDecisionMatrix(decmat)\n6×8 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7     Crt8    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │     2.0      1.0      4.0      7.0      6.0      6.0      7.0   3000.0\n   2 │     4.0      1.0      5.0      6.0      7.0      7.0      6.0   3500.0\n   3 │     3.0      2.0      6.0      6.0      5.0      6.0      8.0   4000.0\n   4 │     5.0      1.0      5.0      7.0      6.0      7.0      7.0   3000.0\n   5 │     4.0      2.0      5.0      6.0      7.0      7.0      6.0   3000.0\n   6 │     3.0      2.0      6.0      6.0      6.0      6.0      6.0   3500.0\n\njulia> weights = [0.293, 0.427, 0.067, 0.027, 0.053, 0.027, 0.053, 0.053];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum, maximum, minimum];\n\njulia> result = mabac(df, weights, fns);\n\njulia> result.scores\n6-element Array{Float64,1}:\n -0.3113160790692055\n -0.10898274573587217\n  0.2003505875974611\n  0.0421839209307945\n  0.3445172542641278\n  0.2003505875974611\n\njulia> result.bestIndex\n5\n\nReferences\n\nPamučar, D., & Ćirović, G. (2015). The selection of transport and handling resources in logistics centers using Multi-Attributive Border Approximation area Comparison (MABAC). Expert Systems with Applications, 42(6), 3016–3028. doi:10.1016/j.eswa.2014.11.057\n\nUlutaş, A. (2019). Entropi ve MABAC yöntemleri ile personel seçimi. OPUS–International Journal of Society Researches, 13(19), 1552-1573. DOI: 10.26466/opus.580456\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MAIRCA","page":"Multiple Criteria Decision Making Tools","title":"MAIRCA","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.mairca","category":"page"},{"location":"mcdms/#JMcDM.mairca","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.mairca","text":"    mairca(decisionMat, weights, fns)\n\nApply MAIRCA (Multi Attributive Ideal-Real Comparative Analysis) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmairca() applies the MAIRCA method to rank n alternatives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MAIRCAResult: MAIRCAResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [6.952 8.000 6.649 7.268 8.000 7.652 6.316;\n       7.319 7.319 6.604 7.319 8.000 7.652 5.313;\n       7.000 7.319 7.652 6.952 7.652 6.952 4.642;\n       7.319 6.952 6.649 7.319 7.652 6.649 5.000]\n4×7 Array{Float64,2}:\n 6.952  8.0    6.649  7.268  8.0    7.652  6.316\n 7.319  7.319  6.604  7.319  8.0    7.652  5.313\n 7.0    7.319  7.652  6.952  7.652  6.952  4.642\n 7.319  6.952  6.649  7.319  7.652  6.649  5.0\n\n julia> df = makeDecisionMatrix(decmat)\n 4×7 DataFrame\n  Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7    \n      │ Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n ─────┼───────────────────────────────────────────────────────────────\n    1 │   6.952    8.0      6.649    7.268    8.0      7.652    6.316\n    2 │   7.319    7.319    6.604    7.319    8.0      7.652    5.313\n    3 │   7.0      7.319    7.652    6.952    7.652    6.952    4.642\n    4 │   7.319    6.952    6.649    7.319    7.652    6.649    5.0\n\njulia> weights = [0.172, 0.165, 0.159, 0.129, 0.112, 0.122, 0.140];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum, minimum];\n\njulia> result = mairca(df, weights, fns);\n\njulia> result.scores\n4-element Array{Float64,1}:\n 0.12064543054088471\n 0.08066456363291889\n 0.14586265389012484\n 0.14542366685864686\n\njulia> result.bestIndex\n2\n\nReferences\n\nPamučar, D., Lukovac, V., Božanić, D., & Komazec, N. (2018). Multi-criteria FUCOM-MAIRCA model for the evaluation of level crossings: case study in the Republic of Serbia. Operational Research in Engineering Sciences: Theory and Applications, 1(1), 108-129.\n\nUlutaş A.(2019),Swara Ve Mairca Yöntemleri İle Catering Firması Seçimi,BMIJ, (2019), 7(4): 1467-1479 http://dx.doi.org/10.15295/bmij.v7i4.1166\n\n\n\n\n\n","category":"function"},{"location":"#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"","page":"Contents","title":"Contents","text":"Pages = [\"index.md\", \"mcdms.md\"]\nDepth = 3","category":"page"}]
}
